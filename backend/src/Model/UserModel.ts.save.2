import bcrypt from "bcrypt";
import config from "../config";
import { pool } from "../Database/connection_db";
import { LoginError } from "../Error/login.error";
import Deck from "./DeckModel";
import { NicknameError } from "../Error/nickname.error";
import { ScoreError } from "../Error/score.error";
import { Query } from "pg";

export default class User {
  deck = new Deck();

  constructor() {}

  /**
   * Used for add a user in the database
   * @param username
   * @param password
   */
  sign_up = async (username: string, password: string) => {
    const salt = bcrypt.genSaltSync(parseInt(config.SALT as string, 10));
    const password_hashed = bcrypt.hashSync(password, salt);

    let deck_of_card = this.deck.create_deck_for_level(0);

    await pool.query(
      `insert into "card_game"."client" values (` +
        "($1)" +
        `,` +
        "($2)" +
        `,0,0,2,` +
        "($3)" +
        `,[0,0,0,0,0,0,0,0,0,0],'',0);`,
      [username, password_hashed, deck_of_card]
    );
  };

  /**
   * Api for login a user in the application
   * @param username
   * @param password
   * @returns
   */
  sign_in = async (username: string, password: string): Promise<Query> => {
    let result = await pool.query(
      `select username,global_score,level_progress,nickname,avatar,bonus from card_game.client where username='` +
        username +
        `'`
    );

    if(result.rows[0].level_progress > 10){
      throw new Error("Level Max Reached");
      
    }

    let deck_level = await pool.query(
      `select deck_level from card_game.client where username='` +
        username +
        `'`
    );

    let number_of_trials = await pool.query(
      `select first_trials from card_game.client where username='` +
        username +
        `'`
    );


    const password_hashed = await pool.query(
      `select password from card_game.client where username='` + username + `'`
    );
    if (
      !result.rows.length ||
      !bcrypt.compareSync(password, password_hashed.rows[0].password)
    ) {
      throw new LoginError("Username or Password not correct", 401);
    }

    if(result.rows[0].level_progress>=10){
      return result.rows[0];
    }

    if (
      result.rows[0].bonus == 0 &&
      number_of_trials.rows[0].first_trials[result.rows[0].level_progress] != 0
    ) {
      result.rows[0].level_progress++;
      deck_level.rows[0].deck_level = this.deck.create_deck_for_level(
        result.rows[0].level_progress
      );

      await pool.query(
        `update card_game.client set level_progress = ($1), deck_level= ($2) where username = ($3) `,
        [result.rows[0].level_progress, deck_level.rows[0].deck_level, username]
      );

      result = await pool.query(
        `select username,global_score,level_progress,nickname,avatar,bonus from card_game.client where username='` +
          username +
          `'`
      );
    }

    return result.rows[0];
  };

  /**
   * increment number of trials of a level when stars a new game for that level
   * @param username
   * @param password
   * @returns
   */

  start_game = async (username: string, password: string) => {
    let password_hashed = await pool.query(
      `select password from card_game.client where username='` + username + `'`
    );
    if (!bcrypt.compareSync(password, password_hashed.rows[0].password)) {
      throw new LoginError("Username or Password not correct", 401);
    }
    let number_of_trials = await pool.query(
      `select first_trials from card_game.client where username='` +
        username +
        `'`
    );
    let bonus = await pool.query(
      `select bonus from card_game.client where username='` + username + `'`
    );

    let level_progress = await pool.query(
      `select level_progress from card_game.client where username='` +
        username +
        `'`
    );

    if (level_progress.rows[0] >= 10) {
      return;
    }

    let deck_level = await pool.query(
      `select deck_level from card_game.client where username='` +
        username +
        `'`
    );

    let global_score = await pool.query(
      `select global_score from card_game.client where username='` +
        username +
        `'`
    );

    number_of_trials.rows[0].first_trials[
      level_progress.rows[0].level_progress
    ] += 1;

    if (
      number_of_trials.rows[0].first_trials[
        level_progress.rows[0].level_progress
      ] > 1
    ) {
      if (bonus.rows[0].bonus > 0) {
        bonus.rows[0].bonus -= 1;
      }
    }

    await pool.query(
      `update card_game.client set global_score=($1), level_progress=($2), bonus=($3), deck_level=($4),first_trials=($5) where username=($6)`,
      [
        global_score.rows[0].global_score,
        level_progress.rows[0].level_progress,
        bonus.rows[0].bonus,
        deck_level.rows[0].deck_level,
        number_of_trials.rows[0].first_trials,
        username,
      ]
    );
    const result = await pool.query(
      `select deck_level,bonus,level_progress from card_game.client where username='` +
        username +
        `'`
    );
    return result.rows[0];
  };

  /**
   * update the score and the deck for one player when he finish a level
   * @param username
   * @param password
   * @param score
   * @returns
   */
  update_score_deck = async (
    username: string,
    password: string,
    score: number
  ) => {
    const password_ = await pool.query(
      `select password from card_game.client where username='` + username + `'`
    );
    if (!bcrypt.compareSync(password, password_.rows[0].password)) {
      throw new LoginError("Username or Password not correct", 401);
    }

    let deck_level = await pool.query(
      `select deck_level from card_game.client where username='` +
        username +
        `'`
    );

    let global_score = await pool.query(
      `select global_score from card_game.client where username='` +
        username +
        `'`
    );
    let number_of_trials = await pool.query(
      `select first_trials from card_game.client where username='` +
        username +
        `'`
    );

    let level_progress = await pool.query(
      `select level_progress from card_game.client where username='` +
        username +
        `'`
    );

    console.log(score);
    console.log(typeof(score))

    if (score > 120) {
      console.log('************')
      throw new ScoreError("Score for single game too high", 400);
    }

    number_of_trials.rows[0].first_trials[
      level_progress.rows[0].level_progress
    ] += 1;

    level_progress.rows[0].level_progress += 1;

    global_score.rows[0].global_score += score;
    console.log('global_score',)

    deck_level.rows[0].deck_level = this.deck.create_deck_for_level(
      level_progress.rows[0].level_progressna
    );

    await pool.query(
      `update card_game.client set global_score=($1), level_progress=($2), deck_level=($3),first_trials=($4) where username=($5)`,
      [
        global_score.rows[0].global_score,
        level_progress.rows[0].level_progress,
        deck_level.rows[0].deck_level,
        number_of_trials.rows[0].first_trials,
        username,
      ]
    );

    const result = await pool.query(
      `select level_progress,global_score from card_game.client where username='` +
        username +
        `'`
    );

    return result.rows[0];
  };

  /**
   * Api for update nickname and avat of a player
   * @param username
   * @param password
   * @param nickname
   * @param avatar
   */

  update_nickname = async (
    username: string,
    password: string,
    nickname: string,
    avatar: number
  ) => {
    let password_hashed = await pool.query(
      `select password from card_game.client where username='` + username + `'`
    );
    if (!bcrypt.compareSync(password, password_hashed.rows[0].password)) {
      throw new LoginError("Username or Password not correct", 401);
    }

    if (!/^[a-zA-Z]{4,8}$/.test(nickname)) {
      throw new NicknameError(
        "Nickname non valido, inserisci un nickname valido tra 4 e 8 caratteri",
        400
      );
    }

    let user_nickname = await pool.query(
      `select nickname from card_game.client where nickname=($1)`,
      [nickname]
    );

    if (user_nickname.rows.length == 0) {
      await pool.query(
        `update card_game.client set nickname=($1),avatar=($2) where username=($3)`,
        [nickname, avatar, username]
      );
    } else {
      throw new NicknameError("nickname already exists", 403);
    }
  };

  /**
   * Api for the scoreboard of all the user
   * @returns
   */
  get_score = async () => {
    const result = await pool.query(
      `select nickname, global_score,level_progress,avatar from card_game.client order by global_score desc`
    );
    return result.rows;
  };
}
